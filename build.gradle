buildscript {
    repositories {
		maven {
            name 'Shadow'
            url 'http://dl.bintray.com/content/johnrengelman/gradle-plugins'
        }
        maven {
            name = 'ForgeFS'
            url = 'http://files.minecraftforge.net/maven'
        }
		maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
		maven {
            name = "jcenter"
            url = "http://jcenter.bintray.com"
        }
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
    }

}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'shadow'

project.ext {
    mainClass = 'net.ftb.legacylaunch.Launch'
    currentYear = '2014'
}

group = 'net.ftb.legacylaunch'
version = '0.0.1'
description = "FTB Legacy Launch Code"
sourceCompatibility = 1.6
targetCompatibility = 1.6
shadow {
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
	//classifier = "${System.getenv().BUILD_NUMBER}"
	destinationDir = "${buildDir}/libs/"
	artifactSet {
		include 'com.beust'

    }
}
task deleteOrig(type: Delete) {
    delete "${project.tasks.jar.getArchivePath().getPath()}"
}

task fixJars(type: Copy) {

    from("${buildDir}/libs/")
	destinationDir = file("${buildDir}/libs/")
        rename { String fileName ->
            fileName.replace('-shadow', '')
        }
		rename(/(.+)-shadow(.+)/, '$1$2')
}
task deleteShadow(type: Delete) {
    delete "${project.tasks.jar.getArchivePath().getPath().replace('.jar', '-shadow.jar')}"

	}

build.dependsOn(deleteShadow)
deleteShadow.dependsOn(fixJars)
fixJars.dependsOn(deleteOrig)
deleteOrig.dependsOn(shadowJar)

jar {
    manifest {
        attributes 'Main-Class': project.mainClass
    }
}


repositories {
	mavenCentral()
}
dependencies {
	compile 'com.beust:jcommander:1.32'
	}

sourceSets {
    main {
        java {
            srcDir 'source'
        }
        resources {
            srcDir 'resources'
        }
    }
}

    if (project.hasProperty("local_maven")) {
	    apply plugin: 'maven'
            uploadArchives {
                repositories {
                    mavenDeployer {
                        repository(url: "file://${local_maven}")
                }
            }
        }
    }
